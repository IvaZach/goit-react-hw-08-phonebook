{"version":3,"file":"static/js/190.1438ce48.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","components/PhoneBook/PhoneBook.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n[selectContacts, selectFilter],(contacts, filter) => {\n  console.log('memo')\n  if (filter !== '') {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n  return contacts;\n}\n)\n\n\n\n\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport css from './ContactForm.module.css';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required(),\n  number: yup\n    .string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const newContact = {\n      name: name.trim(),\n      number: number.trim(),\n    };\n\n    const isNewContact = listContacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isNewContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={css.form}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"validationDefault01\" className=\"form-label\">\n            Name\n          </label>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            id=\"validationDefault01\"\n            className=\"form-control\"\n            placeholder=\"first and last name\"\n          />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"inputTel\" className=\"form-label\">\n            Number\n          </label>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            id=\"inputTel\"\n            className=\"form-control\"\n          />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </div>\n\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const onDelete = () => dispatch(deleteContact(id));\n  return (\n    <>\n      <tr>\n        <td>{name}</td>\n        <td>{number}</td>\n        <td>\n          <button arial-label=\"Delete\" onClick={onDelete}>\n            X\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\n\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  console.log(visibleContacts);\n  return (\n    <>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Number</th>\n            <th scope=\"col\">delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {visibleContacts.map(({ name, number, id }) => (\n            <ContactListItem name={name} number={number} id={id} key={id} />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { findContact } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(findContact(e.target.value));\n  };\n  return (\n    <label className=\"form-label\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n        className=\"form-control\"\n      ></input>\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from 'react';\nimport css from './Section.module.css';\n\nconst Section = ({ children }) => (\n  <section className={css.section}>{children}</section>\n);\n\nexport default Section;\n","import ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport Section from '../Section/Section';\n\nexport const PhoneBook = () => {\n  return (\n    <Section>\n      <div>\n        <h1 className=\"h1\">PHONE BOOK</h1>\n        <ContactForm />\n      </div>\n      <div>\n        <h2 className=\"h1\">Contacts</h2>\n        <Filter />\n        {/* {isLoading && !error && <p>Loading contacts...</p>} */}\n        <ContactList />\n        {/* {error && <h3>{error}</h3>} */}\n      </div>\n    </Section>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\n\nimport { PhoneBook } from 'components/PhoneBook/PhoneBook';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      \n      <div>{isLoading && !error && 'Request in progress... Loading contacts...'}</div>\n      <PhoneBook />\n      {error && <h3>{error}</h3>}\n    </>\n  );\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","console","log","contact","name","toLowerCase","includes","trim","initialValues","number","schema","yup","shape","matches","required","dispatch","useDispatch","listContacts","useSelector","_jsx","Formik","validationSchema","onSubmit","values","_ref","resetForm","newContact","find","alert","concat","addContact","children","_jsxs","Form","className","css","htmlFor","Field","type","id","placeholder","ErrorMessage","component","_Fragment","onClick","deleteContact","visibleContacts","scope","map","ContactListItem","value","onChange","e","findContact","target","PhoneBook","Section","ContactForm","Filter","ContactList","Tasks","useEffect","fetchContacts","Helmet"],"sourceRoot":""}